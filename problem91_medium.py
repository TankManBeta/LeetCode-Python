# -*- coding: utf-8 -*-

"""
    @Author 坦克手贝塔
    @Date 2022/2/17 16:24
"""
"""
一条包含字母 A-Z 的消息通过以下映射进行了编码：
    'A' -> "1"
    'B' -> "2"
    ...
    'Z' -> "26"
要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
    "AAJF" ，将消息分组为 (1 1 10 6)
    "KJF" ，将消息分组为 (11 10 6)
注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
题目数据保证答案肯定是一个 32 位 的整数。

输入：s = "12"
输出：2
解释：它可以解码为 "AB"（1 2）或者 "L"（12）。

输入：s = "226"
输出：3
解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。

输入：s = "0"
输出：0
解释：没有字符映射到以 0 开头的数字。
含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
"""
"""
思路：dp，dp[i]是前i个字符能够解码的数量，当s[i]==0时，如果s[i-1]不合法，则说明连续两个不合法，直接return 0，如果s[i-1]合法，
则dp[i] = dp[i-2]；当前s[i]!=0时，如果s[i-1]合法，s[i]可以由s[i-1]，s[i-2]解码过来，这是两种不同的答案，如果s[i-1]不合法，
则只能从dp[i-1]转移过来
"""


class Solution(object):
    @staticmethod
    def num_decoding(s):
        """
        :type s: str
        :rtype: int
        """
        s = ' ' + s
        n = len(s)
        dp = [0] * n
        dp[0] = 1
        if s[1] == '0':
            return 0
        else:
            dp[1] = 1
        for i in range(2, n):
            if s[i] == '0':
                if s[i - 1] in "03456789":
                    return 0
                else:
                    dp[i] = dp[i - 2]
            else:
                if 11 <= int(s[i - 1:i + 1]) <= 26:
                    dp[i] = dp[i - 1] + dp[i - 2]
                else:
                    dp[i] = dp[i - 1]
        return dp[-1]

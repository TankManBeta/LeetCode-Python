# -*- coding: utf-8 -*-

"""
    @Author 坦克手贝塔
    @Date 2022/12/9 10:04
"""
"""
有效括号字符串为空 ""、"(" + A + ")" 或 A + B ，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。
例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。
如果有效字符串 s 非空，且不存在将其拆分为 s = A + B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。
给出一个非空有效字符串 s，考虑将其进行原语化分解，使得：s = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。
对 s 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 s 。
"""
"""
思路：用栈进行匹配即可，当栈为空的时候，说明已经形成了『原语』。从左向右遍历字符串 s ，当遇到 "("时，将其入栈；当遇到 ")"时，
说明匹配了前面最近一个 "("，因此将栈顶弹出；
"""


class Solution:
    @staticmethod
    def removeOuterParentheses(s: str) -> str:
        res, stack = "", []
        for c in s:
            if c == ')':
                stack.pop()
            if stack:
                res += c
            if c == '(':
                stack.append(c)
        return res

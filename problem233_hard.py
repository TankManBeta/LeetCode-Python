# -*- coding: utf-8 -*-

"""
    @Author 坦克手贝塔
    @Date 2022/4/10 13:59
"""
"""
给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 出现的个数

输入：n = 13
输出：6

输入：n = 0
输出：0
"""
"""
思路：固定每一位为1计算数量，以21012为例，首先固定个位为1，前面四位可以取到0-2101共2102种结果；然后固定十位，前面可以取到0-210，
但个位数在0-209中有0-9->10种取法，而在210时仅有0-2->3种取法，共210*10+1*3；然后固定百位为1，由于当前百位为0，所以前两位只能取
0-20共21种情况，所以有21*100种结果；依次类推，所以我们需要当前位置上的数和1的大小关系以及当前位置后面位置所表示的数
"""


class Solution(object):
    @staticmethod
    def countDigitOne(n):
        """
        :type n: int
        :rtype: int
        """
        # i表示当前所在位的表示的量级，例如1，10，100；before表示当前位以后剩余的数量或者叫余数
        i, res, before = 1, 0, 0
        while n:
            tmp = n % 10
            n //= 10
            if tmp > 1:
                res += (n + 1) * i
            elif tmp == 1:
                res += n * i + before + 1
            else:
                res += n * i
            before += tmp * i
            i *= 10
        return res

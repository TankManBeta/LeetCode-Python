# -*- coding: utf-8 -*-

"""
    @Author 坦克手贝塔
    @Date 2023/8/2 21:57
"""
from itertools import chain
from typing import List

"""
在桌子上有 n 张卡片，每张卡片的正面和背面都写着一个正数（正面与背面上的数有可能不一样）。
我们可以先翻转任意张卡片，然后选择其中一张卡片。
如果选中的那张卡片背面的数字 x 与任意一张卡片的正面的数字都不同，那么这个数字是我们想要的数字。
哪个数是这些想要的数字中最小的数（找到这些数中的最小值）呢？如果没有一个数字符合要求的，输出 0 。
其中, fronts[i] 和 backs[i] 分别代表第 i 张卡片的正面和背面的数字。
如果我们通过翻转卡片来交换正面与背面上的数，那么当初在正面的数就变成背面的数，背面的数就变成正面的数。 

示例 1：
输入：fronts = [1,2,4,4,7], backs = [1,3,4,1,3]
输出：2
解释：假设我们翻转第二张卡片，那么在正面的数变成了 [1,3,4,4,7] ， 背面的数变成了 [1,2,4,1,3]。
接着我们选择第二张卡片，因为现在该卡片的背面的数是 2，2 与任意卡片上正面的数都不同，所以 2 就是我们想要的数字。

示例 2：
输入：fronts = [1], backs = [1]
输出：0
解释：
无论如何翻转都无法得到想要的数字，所以返回 0 。
"""
"""
思路：我们注意到，对于位置 i，若 fronts[i] 与 backs[i] 元素相同，则一定不满足条件。因此，我们先找出正面与背面相同的元素，
记录在哈希表 s 中。接下来，遍历正面与背面的元素，若元素 x 不在哈希表 s 中，则更新答案的最小值。最后，若找到一个满足条件的元素，
返回答案，否则返回 0。
"""


class Solution:
    @staticmethod
    def flipgame(fronts: List[int], backs: List[int]) -> int:
        s = {a for a, b in zip(fronts, backs) if a == b}
        return min((x for x in chain(fronts, backs) if x not in s), default=0)

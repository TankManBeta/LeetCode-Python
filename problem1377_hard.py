# -*- coding: utf-8 -*-

"""
    @Author 坦克手贝塔
    @Date 2023/5/24 11:30
"""
from collections import defaultdict, deque
from typing import List

"""
给你一棵由 n 个顶点组成的无向树，顶点编号从 1 到 n。青蛙从 顶点 1 开始起跳。规则如下：
    在一秒内，青蛙从它所在的当前顶点跳到另一个 未访问 过的顶点（如果它们直接相连）。
    青蛙无法跳回已经访问过的顶点。
    如果青蛙可以跳到多个不同顶点，那么它跳到其中任意一个顶点上的机率都相同。
    如果青蛙不能跳到任何未访问过的顶点上，那么它每次跳跃都会停留在原地。
无向树的边用数组 edges 描述，其中 edges[i] = [ai, bi] 意味着存在一条直接连通 ai 和 bi 两个顶点的边。
返回青蛙在 t 秒后位于目标顶点 target 上的概率。与实际答案相差不超过 10-5 的结果将被视为正确答案。

示例 1：
输入：n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4
输出：0.16666666666666666 
解释：上图显示了青蛙的跳跃路径。青蛙从顶点 1 起跳，第 1 秒 有 1/3 的概率跳到顶点 2 ，然后第 2 秒 有 1/2 的概率跳到顶点 4，
因此青蛙在 2 秒后位于顶点 4 的概率是 1/3 * 1/2 = 1/6 = 0.16666666666666666 。 

示例 2：
输入：n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7
输出：0.3333333333333333
解释：上图显示了青蛙的跳跃路径。青蛙从顶点 1 起跳，有 1/3 = 0.3333333333333333 的概率能够 1 秒 后跳到顶点 7 。 
"""
"""
思路：在每一轮搜索中，我们每次取出队首元素 (u,p)，其中 u 和 p 分别表示当前顶点及其概率。当前顶点 u 的相邻顶点中未被访问过的顶点
的个数记为 cnt。如果 u=target，说明青蛙已经到达目标顶点，此时我们判断青蛙是否在 t 秒到达目标顶点，或者不到 t 秒到达目标顶点但是
无法再跳跃到其它顶点（即 t=0 或者 cnt=0）。如果是，则返回 p，否则返回 0。如果 u =target，那么我们将概率 p 均分给 u 的所有未被
访问过的相邻顶点，然后将这些顶点加入队列 q 中，并且将这些顶点标记为已访问。在一轮搜索结束后，我们将 t 减少 1，然后继续进行下一轮
搜索，直到队列为空或者 t<0。最后，若青蛙仍然没有到达目标顶点，那么我们返回 0。
"""


class Solution:
    @staticmethod
    def frogPosition(n: int, edges: List[List[int]], t: int, target: int) -> float:
        g = defaultdict(list)
        for u, v in edges:
            g[u].append(v)
            g[v].append(u)
        q = deque([(1, 1.0)])
        vis = [False] * (n + 1)
        vis[1] = True
        while q and t >= 0:
            for _ in range(len(q)):
                u, p = q.popleft()
                cnt = len(g[u]) - int(u != 1)
                if u == target:
                    return p if cnt * t == 0 else 0
                for v in g[u]:
                    if not vis[v]:
                        vis[v] = True
                        q.append((v, p / cnt))
            t -= 1
        return 0

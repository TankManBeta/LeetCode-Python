# -*- coding: utf-8 -*-

"""
    @Author 坦克手贝塔
    @Date 2022/3/24 11:36
"""
"""
编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。

提示：
    请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的
    实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
    在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
"""
"""
思路：
（1）直接变成字符串然后count
（2）循环移位
（3）n&(n-1)可以去除最后的1，只需要统计这个操作的次数即可，举例子假设n最后四位二进制表示是1000，n-1即为0111，两个与上之后就变
成了0000
"""


class Solution(object):
    @staticmethod
    def hammingWeight(n):
        """
        :type n: int
        :rtype: int
        """
        # n = str(bin(n))
        # return n.count('1')

        # res = 0
        # while n:
        #     res += n & 1
        #     n >>= 1
        # return res

        res = 0
        while n:
            res += 1
            n &= n - 1
        return res

# -*- coding: utf-8 -*-

"""
    @Author 坦克手贝塔
    @Date 2023/4/8 下午1:02
"""
from typing import List

"""
在一个长度 无限 的数轴上，第 i 颗石子的位置为 stones[i]。如果一颗石子的位置最小/最大，那么该石子被称作 端点石子 。
每个回合，你可以将一颗端点石子拿起并移动到一个未占用的位置，使得该石子不再是一颗端点石子。
值得注意的是，如果石子像 stones = [1,2,5] 这样，你将 无法 移动位于位置 5 的端点石子，因为无论将它移动到任何位置（例如 0 或 3），该石子都仍然会是端点石子。
当你无法进行任何移动时，即，这些石子的位置连续时，游戏结束。
要使游戏结束，你可以执行的最小和最大移动次数分别是多少？ 以长度为 2 的数组形式返回答案：answer = [minimum_moves, maximum_moves] 。

示例 1：
输入：[7,4,9]
输出：[1,2]
解释：
我们可以移动一次，4 -> 8，游戏结束。
或者，我们可以移动两次 9 -> 5，4 -> 6，游戏结束。

示例 2：
输入：[6,5,4,3,10]
输出：[2,3]
解释：
我们可以移动 3 -> 8，接着是 10 -> 7，游戏结束。
或者，我们可以移动 3 -> 7, 4 -> 8, 5 -> 9，游戏结束。
注意，我们无法进行 10 -> 2 这样的移动来结束游戏，因为这是不合要求的移动。

示例 3：
输入：[100,101,104,102,103]
输出：[0,0]
"""
"""
思路：排序+分类+双指针。先对stones排序。首先考虑最大次数，因为每次只可以取端点石子放在非端点位置，所以要是从头开始，stones[0]
和stones[1]之间的位置都不可以放；同理要是从尾开始，stones[n-1]和stones[n-2]之间也不可以放；剩下的位置都可以放，空位之和为最大
可移动次数。我们用双指针 i 和 j 标识一个窗口的左右端点，若窗口内的位置数 stones[j]−stones[i]+1>n 时，我们需要缩小窗口，即指针 
i 向右移动。如果此时窗口中有连续的 n−1 个石子，即满足 j−i+1=n−1 且 stones[j]−stones[i]+1=n−1，那么最少需要移动的次数为 2；
否则，我们用 n 减去窗口内的石子数，可以得到最少需要移动的次数，即 n−(j−i+1)。取所有情况的最小值即为最小移动次数 mi。
"""


class Solution:
    @staticmethod
    def numMovesStonesII(stones: List[int]) -> List[int]:
        stones.sort()
        mi = n = len(stones)
        mx = max(stones[-1] - stones[1] + 1, stones[-2] - stones[0] + 1) - (n - 1)
        i = 0
        for j, x in enumerate(stones):
            while x - stones[i] + 1 > n:
                i += 1
            if j - i + 1 == n - 1 and x - stones[i] == n - 2:
                mi = min(mi, 2)
            else:
                mi = min(mi, n - (j - i + 1))
        return [mi, mx]

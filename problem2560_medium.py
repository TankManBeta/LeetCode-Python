# -*- coding: utf-8 -*-

"""
    @Author 坦克手贝塔
    @Date 2023/9/19 15:02
"""
from bisect import bisect_left
from typing import List

"""
沿街有一排连续的房屋。每间房屋内都藏有一定的现金。现在有一位小偷计划从这些房屋中窃取现金。
由于相邻的房屋装有相互连通的防盗系统，所以小偷 不会窃取相邻的房屋 。
小偷的 窃取能力 定义为他在窃取过程中能从单间房屋中窃取的 最大金额 。
给你一个整数数组 nums 表示每间房屋存放的现金金额。形式上，从左起第 i 间房屋中放有 nums[i] 美元。
另给你一个整数 k ，表示窃贼将会窃取的 最少 房屋数。小偷总能窃取至少 k 间房屋。
返回小偷的 最小 窃取能力。 

示例 1：
输入：nums = [2,3,5,9], k = 2
输出：5
解释：
小偷窃取至少 2 间房屋，共有 3 种方式：
- 窃取下标 0 和 2 处的房屋，窃取能力为 max(nums[0], nums[2]) = 5 。
- 窃取下标 0 和 3 处的房屋，窃取能力为 max(nums[0], nums[3]) = 9 。
- 窃取下标 1 和 3 处的房屋，窃取能力为 max(nums[1], nums[3]) = 9 。
因此，返回 min(5, 9, 9) = 5 。

示例 2：
输入：nums = [2,7,9,3,1], k = 2
输出：2
解释：共有 7 种窃取方式。窃取能力最小的情况所对应的方式是窃取下标 0 和 4 处的房屋。返回 max(nums[0], nums[4]) = 2 。
"""
"""
思路：题目求的是窃贼的最小窃取能力，我们可以二分枚举窃贼的窃取能力，对于枚举的能力 x，我们可以通过贪心的方式判断窃贼是否能够窃取至少 k 间房屋，
具体地，我们从左到右遍历数组，对于当前遍历到的房屋 i，如果 nums[i]≤x 且 i 与上一个窃取的房屋的下标之差大于 1，则窃贼可以窃取房屋 i，否则
窃贼不能窃取房屋 i。累计窃取的房屋数，如果窃取的房屋数大于等于 k，则说明窃贼可以窃取至少 k 间房屋，此时窃贼的窃取能力 x 可能是最小的，否则
窃贼的窃取能力 x 不是最小的。
"""


class Solution:
    @staticmethod
    def minCapability(nums: List[int], k: int) -> int:
        def f(x):
            cnt, j = 0, -2
            for i, v in enumerate(nums):
                if v > x or i == j + 1:
                    continue
                cnt += 1
                j = i
            return cnt >= k

        return bisect_left(range(max(nums) + 1), True, key=f)

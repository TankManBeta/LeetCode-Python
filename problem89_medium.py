# -*- coding: utf-8 -*-

"""
    @Author 坦克手贝塔
    @Date 2022/2/16 16:03
"""
"""
n 位格雷码序列 是一个由 2n 个整数组成的序列，其中：
    每个整数都在范围 [0, 2n - 1] 内（含 0 和 2n - 1）
    第一个整数是 0
    一个整数在序列中出现 不超过一次
    每对 相邻 整数的二进制表示 恰好一位不同 ，且
    第一个 和 最后一个 整数的二进制表示 恰好一位不同
给你一个整数 n ，返回任一有效的 n 位格雷码序列 。

输入：n = 2
输出：[0,1,3,2]
解释：
[0,1,3,2] 的二进制表示是 [00,01,11,10] 。
- 00 和 01 有一位不同
- 01 和 11 有一位不同
- 11 和 10 有一位不同
- 10 和 00 有一位不同
[0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。
- 00 和 10 有一位不同
- 10 和 11 有一位不同
- 11 和 01 有一位不同
- 01 和 00 有一位不同

输入：n = 1
输出：[0,1]
"""
"""
思路：
题目约定了第一个整数必须为 0，所以，我们可以先把 0 放入结果集中。
假设返回 1 位的格雷码序列，我们可以很容易得到结果为 [0, 1]。
假设返回 2 位的格雷码序列，我们也可以容易得到结果为 [00, 01, 11, 10]，为了方便观察，我们用二进制表示。
假设返回 3 位的格雷码序列，我们可以在2位的倒序结果上在每个值的最前面加上1，就变成了 [110, 111, 101, 100]，
再合并上 2 位的序列，最终的结果为 [000, 001, 011, 010] | [110, 111, 101, 100]，| 表示合并。
同样地方法，我们可以在 3 位的基础上很容易得到 4 位的格雷码序列：
[0000, 0001, 0011, 0010, 0110, 0111, 0101, 0100] | [1100, 1101, 1111, 1110, 1010, 1011, 1001, 1000]
总结一下，n 位的格雷码序列 等于 (n-1) 位的格雷码序列 并上 (n-1) 位的格雷码序列倒序前面加1的结果。
"""


class Solution(object):
    @staticmethod
    def gray_code(n):
        """
        :type n: int
        :rtype: List[int]
        """
        res = [0]
        for i in range(1, n+1):
            for j in range(len(res) - 1, -1, -1):
                res.append(res[j] | (1 << (i - 1)))
        return res

# -*- coding: utf-8 -*-

"""
    @Author 坦克手贝塔
    @Date 2023/4/11 10:35
"""
"""
在无限的平面上，机器人最初位于 (0, 0) 处，面朝北方。注意:
    北方向 是y轴的正方向。
    南方向 是y轴的负方向。
    东方向 是x轴的正方向。
    西方向 是x轴的负方向。
机器人可以接受下列三条指令之一：
    "G"：直走 1 个单位
    "L"：左转 90 度
    "R"：右转 90 度
机器人按顺序执行指令 instructions，并一直重复它们。
只有在平面中存在环使得机器人永远无法离开时，返回 true。否则，返回 false。 

示例 1：
输入：instructions = "GGLLGG"
输出：true
解释：机器人最初在(0,0)处，面向北方。
“G”:移动一步。位置:(0,1)方向:北。
“G”:移动一步。位置:(0,2).方向:北。
“L”:逆时针旋转90度。位置:(0,2).方向:西。
“L”:逆时针旋转90度。位置:(0,2)方向:南。
“G”:移动一步。位置:(0,1)方向:南。
“G”:移动一步。位置:(0,0)方向:南。
重复指令，机器人进入循环:(0,0)——>(0,1)——>(0,2)——>(0,1)——>(0,0)。
在此基础上，我们返回true。

示例 2：
输入：instructions = "GG"
输出：false
解释：机器人最初在(0,0)处，面向北方。
“G”:移动一步。位置:(0,1)方向:北。
“G”:移动一步。位置:(0,2).方向:北。
重复这些指示，继续朝北前进，不会进入循环。
在此基础上，返回false。

示例 3：
输入：instructions = "GL"
输出：true
解释：机器人最初在(0,0)处，面向北方。
“G”:移动一步。位置:(0,1)方向:北。
“L”:逆时针旋转90度。位置:(0,1).方向:西。
“G”:移动一步。位置:(- 1,1)方向:西。
“L”:逆时针旋转90度。位置:(- 1,1)方向:南。
“G”:移动一步。位置:(- 1,0)方向:南。
“L”:逆时针旋转90度。位置:(- 1,0)方向:东方。
“G”:移动一步。位置:(0,0)方向:东方。
“L”:逆时针旋转90度。位置:(0,0)方向:北。
重复指令，机器人进入循环:(0,0)——>(0,1)——>(- 1,1)——>(- 1,0)——>(0,0)。
在此基础上，我们返回true。
"""
"""
思路：模拟，可以证明最后没有环的条件是在一串指令之后的状态，必须是不位于原点且方向朝北。
"""


class Solution:
    @staticmethod
    def isRobotBounded(instructions: str) -> bool:
        # all_ins = instructions
        # ls = {
        #     0: [-1, 0],
        #     1: [0, -1],
        #     2: [1, 0],
        #     3: [1, 0]
        # }
        # rs = {
        #     0: [1, 0],
        #     1: [0, 1],
        #     2: [-1, 0],
        #     3: [0, -1]
        # }
        # k = 0
        # dir_x, dir_y = 0, 1
        # x, y = 0, 0
        # for ins in all_ins:
        #     if ins == 'G':
        #         x, y = x+dir_x, y+dir_y
        #     elif ins == 'L':
        #         dir_x, dir_y = ls[k][0], ls[k][1]
        #         k = (k+1) % 4
        #     else:
        #         dir_x, dir_y = rs[k][0], rs[k][1]
        #         k = k-1 if k != 0 else 3
        # return k != 0 or (x == 0 and y == 0)

        k = 0
        dist = [0] * 4
        for c in instructions:
            if c == 'L':
                k = (k + 1) % 4
            elif c == 'R':
                k = (k + 3) % 4
            else:
                dist[k] += 1
        return (dist[0] == dist[2] and dist[1] == dist[3]) or k != 0

# -*- coding: utf-8 -*-

"""
    @Author 坦克手贝塔
    @Date 2022/11/12 14:39
"""
"""
有两种形状的瓷砖：一种是 2 x 1 的多米诺形，另一种是形如 "L" 的托米诺形。两种形状都可以旋转。
给定整数 n ，返回可以平铺 2 x n 的面板的方法的数量。返回对 109 + 7 取模 的值。
平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，
使得恰好有一个平铺有一个瓷砖占据两个正方形。

示例 1:
输入: n = 3
输出: 5
解释: 五种不同的方法。

示例 2:
输入: n = 1
输出: 1
"""
"""
思路：动态规划，当前列共有四种状态，全都没填，全都填满，上面填了，下面填了。dp[i][0]只能由前一次全都填满转换过来；dp[i][1]表示
当前全满的状态，可以从前一次的任意一个状态转换过来；dp[i][2]表示当前上面填了，可以由上一次全没填和上一次只填了下面转换过来；
dp[i][3]表示当前下面填了，可以有上次全都没填和上次只填了上面的状态转换而来。
"""


class Solution:
    @staticmethod
    def numTilings(n: int) -> int:
        dp = [[0]*4 for _ in range(n+1)]
        dp[1][0] = dp[1][1] = 1
        for i in range(2, n + 1):
            dp[i][0] = dp[i - 1][1]
            dp[i][1] = sum([dp[i - 1][j] for j in range(4)])
            dp[i][2] = dp[i - 1][0] + dp[i - 1][3]
            dp[i][3] = dp[i - 1][0] + dp[i - 1][2]
        return dp[n][1] % 1000000007
